c
HistoricalPrice.insert_all(@parser.map{|historical| historical[1][0]})
HistoricalPrice.insert_all(@parser.map{|historical| historical[1]})
HistoricalPrice.insertall(@parser.map{|historical| historical[1]})
HistoricalPrices.insertall(@parser.map{|historical| historical[1]})
@parser.map{|historical| historical[1]}.compact
@parser.map{|historical| historical[1[0]]}.compact
@parser.map{|historical| historical[1]}.compact
@parser.map{|historical| historical[1]}
@parser.map[1]
@parser.as_json(except: [:id, :created_at, :updated_at, :month])
@parser
@parser.insert_all
@parser.save
@parser = Parser.new(archive_path: "#{params[:ticker]}.SA.csv", ticker: parser_params[:ticker], year: parser_params[:year]).call
c
data
c
@parser.map{|x| x[1][0]}.compact
data
c
data
c
data
c
data
c
ticker
c
@ticker
ticker
c
ticker
@ticker
ticker
c
@parser.map{|x| x[1][0]}.compact.each do |x| x.merge(ticker: params[:ticker]) end
@parser.map{|x| x[1][0]}.compact.each do |x| x.merge(ticker: params[:ticker] end
@parser.map{|x| x[1][0]}.compact.each do |x| puts end
@parser.map{|x| x[1][0]}.compact.each do |x| puts xend
@parser.map{|x| x[1][0].merge(ticker: 'asdsa')}.compact
@parser.map{|x| x[1][0]}.compact
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1][0]}.compact
@parser.map{|x| x[1][0]}.compact.merge(ticker: params[:ticker])
@parser.map{|x| x[1][0]}.compact
@parser.map{|x| x[1][0].merge(ticker: params[:ticker])}.compact
@parser.map{|x| x[1][0]}.compact
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1][0]]
@parser.map{|x| x[1][0][0]}
@parser.map{|x| x[1][0][1]}
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1][1]}
@parser.map{|x| x[1]}
@parser.map{|x| x[1]}.compact
@parser.map{|x| x[1].compact}
@parser.map{|x| x[1]}
@parser.map{|x| x[1][0].compact}
@parser.map{|x| x[1][0] == nil}
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1].reduce([])}
@parser.map{|x| x[1][0].reduce([])}
@parser.map{|x| x[1][0].reduce([]).merge(ticker: params[:ticker])}
@parser.map{|x| x[1][0].merge(ticker: params[:ticker])}
@parser.map{|x| x.compact}
@parser.map{|x| x[1].compact}
@parser.map{|x| x[1]}.compact
@parser.map{|x| x[1].compact}
@parser.map{|x| x[1]}
@parser.map{|x| x[1][0].compact}
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1][0])}
@parser.map{|x| x[1][0].merge(ticker: params[:ticker])}
c
@parser.map{|x| x[1][0].merge(ticker: params[:ticker])}c
@parser.map{|x| x[1][0].merge(ticker: params[:ticker])}
@parser.map{|x| x[1].merge(ticker: params[:ticker])}
@parser.map{|x| x[1].merge(ticker: params[:ticker]}
@parser.map{|x| x[1]}
@parser
c
HistoricalPrice.insert_all!(@parser.map{|x| x[1][0]})
HistoricalPrice.insert_all(@parser.map{|x| x[1][0]})
HistoricalPrice.insert_all(@parser.map{|x| x[0]})
HistoricalPrice.insert_all(@parser.map{|x| x[1]})
HistoricalPrice.insert_all(@parser.map{|x| x.first})
HistoricalPrice.insert_all(@parser.map{|x| x})
HistoricalPrice.insert_all(@parser.map{|x| x[1]})
@parser.map{|x| x[1][0]}
HistoricalPrice.insert_all(@parser.map{|x| x[1][0]})
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1][0][0]}
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1][0].first}
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1][1]}
@parser.map{|x| x[1]}
@parser.map{|x| x[1]}.first
@parser.map{|x| x[1].first}
@parser.map{|x| x[1].first.first}
@parser.map{|x| x[1].first}
@parser.map{|x| x[1]to_h}
@parser.map{|x| x[1]}
@parser.map{|x| x}
@parser.map{|x| x.first}
@parser
historical_price.save
historical_price
historical_price.save
historical_price = HistoricalPrice.insert_all(@parser.map{|x| x[1].first})
HistoricalPrice.select(:month, :year, :open_price, :highest_price, :lowest_price, :volume, :close_price, :id).where(year: params[:year], ticker: params[:ticker])
HistoricalPrice.insert_all!(@parser.map{|x| x[1].first})
HistoricalPrice.select(:month, :year, :open_price, :highest_price, :lowest_price, :volume, :close_price, :id).where(year: params[:year], ticker: params[:ticker])
c
HistoricalPrice.insert_all(@parser.map{|x| x[1].first})
@parser.map{|x| x[1].first}
@parser.map{|x| x[1].first}.to_a
@parser.map{|x| x[1].first}.to_h
@parser.map{|x| x[1].first}.class
@parser.map{|x| x[1].first}.first
@parser.map{|x| x[1].first}.to_h
@parser.map{|x| x[1].first}
@parser.map{|x| x[1].first[0]}
@parser.map{|x| x[1].first[1]}
@parser.map{|x| x[1].first}
@parser.map{|x| x[1]}
@parser[1]
@parser
HistoricalPrice.insert_all(@parser.map{|x| x[1]})
HistoricalPrice.insert_all(parser.map{|x| x[1]})
c
@parser.to_a.map{|x| x[1][0]}
@parser.to_a.map{|x| x[1][0]}}
@parser
c
@parser.to_a.map{|x| x[1][0]}.first
@parser.to_a.map{|x| x[1][0]}
@parser.to_a.map{|x| x[1]}.first
@parser.to_a.map{|x| x[1]}.first.to_h
@parser.to_a.map{|x| x[1]}.first
@parser.to_a.map{|x| x[1]}
c
@parser.to_a.map{|x| x[1]}c
@parser.to_a.map{|x| x[1]}.class
@parser.to_a.map{|x| x[1]}
@parser.to_a[1]
@parser.to_a
@parser.class
@parser.class?
@parser
@parser.first[1][0]
@parser.first[1].to_hash
@parser.first[1].to_h
@parser.first[1].class
@parser.first[1]
@parser[1]
@parser.first
@parser
@parser[1]
@parser
c
C
c
data
c
data
data = data.merge(ticker: params[:ticker])
data
data.merge(ticker: params[:ticker])
params[:ticker]
data
c
data
n
data.merge(ticker: params[:ticker])
data
cdata
c
HistoricalPrice.new(data)
data
c
HistoricalPrice
HistoricalPRice
HistoricalPrice.new(data)
data
HistoricalPrice.new(parsed[1].first)
HistoricalPrice.new(parsed[1])
HistoricalPrice.new(parsed[1], month: month)
month
parsed[1].map{|x| x.to_h}.first
parsed
parsed[1]
parsed[1].to_a
parsed[1].to_h
parsed[1].first
parsed[1]
parsed[1][1]
parsed[1]
parsed
c
parsed[0]
parsed[:month]
parsed
month
c
data[:open]
data[:open].to_f
data[:year]
data[1]
data
c
parsed[1].map{|x| x.to_h}.first
parsed[1].map{|x| x.to_h}
data.first
data.to_h
data.first
data[1]
data
c
parsed[1].map{|x| x.first}
parsed[1].map{|x| x}.to_h
parsed[1].map{|x| x[:open]}.to_h
parsed[1].map{|x| x[:open]}
parsed[1].map{|x| x.to_h}
parsed[1].map{|x| x.to_h}.to_h
parsed[1].map{|x| x.to_h}
parsed[1]
parsed[0]
parsed
c
n
@parser[0]
@parser.map{|x| x[0]}
@parser.map{|x| x[1]}
@parser.map{|x| x}
@parser.map{|x| x[:january]}
@parser.map{|x| x[x.first]}
@parser.map{|x| x.first}
@parser.map{|x| x}
@parsear.map{|x| x}
@parser
c
@parser[:result].map{|x| x}
@parser[:result].map{|x| x[:month]}
@parser[:result].map{|x| x[?month]}
@parser[:result].map{|x| x[month]}
@parser[:result].map{|x| x}
@parser[:result].map{|x| x}.map{|x| x}
@parser[:result].map{|x| x}.each do |x| x.first end
@parser[:result].map{|x| x}
@parser[:result].map{|x| x.first}
@parser[:result]
@parser[0]
@parser.first
@parser
