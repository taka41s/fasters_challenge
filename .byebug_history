c
@parser.map{|x| x[1][0].merge(ticker: params[:ticker])}c
@parser.map{|x| x[1][0].merge(ticker: params[:ticker])}
@parser.map{|x| x[1].merge(ticker: params[:ticker])}
@parser.map{|x| x[1].merge(ticker: params[:ticker]}
@parser.map{|x| x[1]}
@parser
c
HistoricalPrice.insert_all!(@parser.map{|x| x[1][0]})
HistoricalPrice.insert_all(@parser.map{|x| x[1][0]})
HistoricalPrice.insert_all(@parser.map{|x| x[0]})
HistoricalPrice.insert_all(@parser.map{|x| x[1]})
HistoricalPrice.insert_all(@parser.map{|x| x.first})
HistoricalPrice.insert_all(@parser.map{|x| x})
HistoricalPrice.insert_all(@parser.map{|x| x[1]})
@parser.map{|x| x[1][0]}
HistoricalPrice.insert_all(@parser.map{|x| x[1][0]})
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1][0][0]}
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1][0].first}
@parser.map{|x| x[1][0]}
@parser.map{|x| x[1][1]}
@parser.map{|x| x[1]}
@parser.map{|x| x[1]}.first
@parser.map{|x| x[1].first}
@parser.map{|x| x[1].first.first}
@parser.map{|x| x[1].first}
@parser.map{|x| x[1]to_h}
@parser.map{|x| x[1]}
@parser.map{|x| x}
@parser.map{|x| x.first}
@parser
historical_price.save
historical_price
historical_price.save
historical_price = HistoricalPrice.insert_all(@parser.map{|x| x[1].first})
HistoricalPrice.select(:month, :year, :open_price, :highest_price, :lowest_price, :volume, :close_price, :id).where(year: params[:year], ticker: params[:ticker])
HistoricalPrice.insert_all!(@parser.map{|x| x[1].first})
HistoricalPrice.select(:month, :year, :open_price, :highest_price, :lowest_price, :volume, :close_price, :id).where(year: params[:year], ticker: params[:ticker])
c
HistoricalPrice.insert_all(@parser.map{|x| x[1].first})
@parser.map{|x| x[1].first}
@parser.map{|x| x[1].first}.to_a
@parser.map{|x| x[1].first}.to_h
@parser.map{|x| x[1].first}.class
@parser.map{|x| x[1].first}.first
@parser.map{|x| x[1].first}.to_h
@parser.map{|x| x[1].first}
@parser.map{|x| x[1].first[0]}
@parser.map{|x| x[1].first[1]}
@parser.map{|x| x[1].first}
@parser.map{|x| x[1]}
@parser[1]
@parser
HistoricalPrice.insert_all(@parser.map{|x| x[1]})
HistoricalPrice.insert_all(parser.map{|x| x[1]})
c
@parser.to_a.map{|x| x[1][0]}
@parser.to_a.map{|x| x[1][0]}}
@parser
c
@parser.to_a.map{|x| x[1][0]}.first
@parser.to_a.map{|x| x[1][0]}
@parser.to_a.map{|x| x[1]}.first
@parser.to_a.map{|x| x[1]}.first.to_h
@parser.to_a.map{|x| x[1]}.first
@parser.to_a.map{|x| x[1]}
c
@parser.to_a.map{|x| x[1]}c
@parser.to_a.map{|x| x[1]}.class
@parser.to_a.map{|x| x[1]}
@parser.to_a[1]
@parser.to_a
@parser.class
@parser.class?
@parser
@parser.first[1][0]
@parser.first[1].to_hash
@parser.first[1].to_h
@parser.first[1].class
@parser.first[1]
@parser[1]
@parser.first
@parser
@parser[1]
@parser
c
C
c
data
c
data
data = data.merge(ticker: params[:ticker])
data
data.merge(ticker: params[:ticker])
params[:ticker]
data
c
data
n
data.merge(ticker: params[:ticker])
data
cdata
c
HistoricalPrice.new(data)
data
c
HistoricalPrice
HistoricalPRice
HistoricalPrice.new(data)
data
HistoricalPrice.new(parsed[1].first)
HistoricalPrice.new(parsed[1])
HistoricalPrice.new(parsed[1], month: month)
month
parsed[1].map{|x| x.to_h}.first
parsed
parsed[1]
parsed[1].to_a
parsed[1].to_h
parsed[1].first
parsed[1]
parsed[1][1]
parsed[1]
parsed
c
parsed[0]
parsed[:month]
parsed
month
c
data[:open]
data[:open].to_f
data[:year]
data[1]
data
c
parsed[1].map{|x| x.to_h}.first
parsed[1].map{|x| x.to_h}
data.first
data.to_h
data.first
data[1]
data
c
parsed[1].map{|x| x.first}
parsed[1].map{|x| x}.to_h
parsed[1].map{|x| x[:open]}.to_h
parsed[1].map{|x| x[:open]}
parsed[1].map{|x| x.to_h}
parsed[1].map{|x| x.to_h}.to_h
parsed[1].map{|x| x.to_h}
parsed[1]
parsed[0]
parsed
c
n
@parser[0]
@parser.map{|x| x[0]}
@parser.map{|x| x[1]}
@parser.map{|x| x}
@parser.map{|x| x[:january]}
@parser.map{|x| x[x.first]}
@parser.map{|x| x.first}
@parser.map{|x| x}
@parsear.map{|x| x}
@parser
c
@parser[:result].map{|x| x}
@parser[:result].map{|x| x[:month]}
@parser[:result].map{|x| x[?month]}
@parser[:result].map{|x| x[month]}
@parser[:result].map{|x| x}
@parser[:result].map{|x| x}.map{|x| x}
@parser[:result].map{|x| x}.each do |x| x.first end
@parser[:result].map{|x| x}
@parser[:result].map{|x| x.first}
@parser[:result]
@parser[0]
@parser.first
@parser
parsed
@parser.map{|x| x.each do |x| x[0] end}
@parser.map{|x| x.each do |x| x[1] end}
@parser.map{|x| x.each do |x| x[:month] x[1] end}
@parser.map{|x| x.each do |x| x[:month] end}
@parser.map{|x| x.each do |x| end}
@parser.map{|x| x.each do |x|}
@parser.map{|x| x[:month]}
@parser[1]
@parser
parsed[1][:month]
parsed[1]
parsed[1][1]
parsed[1].first
parsed[1]
parsed[1][:month]
parsed[1]
parsed[0]
parsed
c
parsed[1].map{|x| x.to_h}
data[0][:open].to_f
data = parsed[1].map{|x| x.to_h}
data
data[0][:open].to_f
data[0]
parsed[1].map{|x| x.to_h}
parsed[1]
parsed
c
parsed
c
data
c
month
year
c
month
c
month
c
month
c
month
c
month
c
month
c
month
c
month
c
data
month
data
datra
      data[month] << {
        open: organize_month_tuples[month]&.first[:open], 
        close: organize_month_tuples[month].last[:close], volume: volume, 
        lowest_price: organize_month_tuples[month].map{|row| row[:low]}.min,
        highest_price: organize_month_tuples[month].map{|row| row[:high]}.max
      }
data
c
data
c
data
c
data
c
data
c
data
