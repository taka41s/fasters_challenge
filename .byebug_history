c
data.present?
parsed[1].present?
parsed.present?
parsed
data
data[5]
c
data[5]
data
n
data
data[5]
        @historical_price = HistoricalPrice.new(year: data[5][:year], month: month, 
          open_price: data[0][:open].to_f, highest_price: data[4][:highest_price].to_f, 
          lowest_price: data[3][:lowest_price].to_f, volume: data[2][:volume].to_i, close_price: data[1][:close].to_f)
c
parsed
month
c
year
c
@historical_price.save
        @historical_price = HistoricalPrice.new(month: month, 
          open_price: data[0][:open].to_f, highest_price: data[4][:highest_price].to_f, 
          lowest_price: data[3][:lowest_price].to_f, volume: data[2][:volume].to_i, close_price: data[1][:close].to_f)
        @historical_price = HistoricalPrice.new(month: month, 
          open_price: data[0][:open].to_f, highest_price: data[4][:highest_price].to_f, 
          lowest_price: data[3][:lowest_price].to_f, volume: data[2][:volume].to_i, close_price: data[1][:close.to_f])
data[4][:highest_price]
data
data[0][:open].to_f
data[0][:open].to
data[0][:open]
data[0]
data[0].values.to_fs
data[0].values.to_f
data[0].values
data[0].value
data[0].to_f
data[0]
@historical_price.save
@historical_price = HistoricalPrice.new(month: month, open_price: data[0], highest_price: data[4], lowest_price: data[3], volume: data[2], close_price: data[1])
@historical_price.save
HistoricalPrice.new(month: month, open_price: data[0], highest_price: data[4], lowest_price: data[3], volume: data[2], close_price: data[1])
HistoricalPrice.new(month: month, open_price: data[0], highest_price[4]:, lowest_price:data[3], volume:data[2], close_price: data[1])
data[0]
data[:open]
data
data.first
data
c
parsed[1].map{|x| hash.merge!(x.to_h)}
data = parsed[1].map{|x| hash.merge!(x.to_h)}
data = parsed[1].map{|x| hash.merge!(month: month, x.to_h)}
month = parsed[0].to_s
month = parsed[0]
parsed[0].to_s
month
parsed[1].map{|x| hash.merge!(month, x.to_h)}
hash
parsed[1].map{|x| hash.merge!(x.to_h)}
parsed[1].map{|x| hash.merge(x.to_h)}
hash
parsed[1].map{|x| hash.merge(x.to_h)}
hash
parsed
parsed[1]
@parser
parsed[1].map{|x| hash.merge(x.to_h)}
parsed[1].map{|x| hash << x.to_h}
hash = {}
parsed[1].map{|x| x.to_h}
parsed[1].map{|x| x.to_h}[0]
year
parsed[1].map{|x| x.to_h}[0]
parsed[1].map{|x| x.to_h}
parsed[1].map{|x| x.to_h[:open]}
parsed[1].map{|x| x.to_h}[:open]
parsed[1].map{|x| x.to_h}.open
parsed[1].map{|x| x.to_h}[1]
parsed[1].map{|x| x.to_h}
HistoricalPrice
HistoricalPRice
parsed[1].map{|x| x.to_h}
parsed[1].map{|x| x.to_h
parsed[1]
parsed[1].to_h
parsed[1]
parsed.map{|x| x.to_h}
parsed[0].to_s
parsed[0]
parsed
parsed.map{|x| x.first}
parsed
c
@parser.first[1].map{|x| x.to_hc}
@parser.first[1].map{|x| x.to_h}
@parser.first[1].map{|x| x}
@parser.first[1].map{|x| x.class}
@parser.first[1]
@parser.first[1].to_s.to_h
@parser.first[1].to_s
@parser.first[1].to_a
@parser.first[1]
@parser.first[1].to_h
@parser.first.map{|x| x}
@parser.first
@parser.first[1]
@parser.first
@parser.first.to_hash
@parser.first.to_h
@parser.first
HistoricalPrice.new(@parser.first)
c
@parser.first
HistoricalPrice.new(@parser.first)
HistoricalPrice.new(@parser)
HistoricalPrices.new(@parser)
HistoricalPrices
c
@parser.first
HistoricalPrice
HistoricalPRice
@parser
HistoricalPrice.new(@parser)
c
@parser.last
@parser.first
@parser
@parser.first}
@parser.map{|x| x[x.first]}
@parser.map{|x| x[x.month]}
@parser.map{|x| x[x.month}
@parser.map{|x| x.first}
@parser.map{|x| x}
@parser
c
n
@parser
n
c
C
c
params[:ticker]
params
c
params[:ticker]
params
c
params[:ticker]
c
params[:ticker]
c
params
params[:ticker]
c
params[:ticker]
c
params
c
get "/list"
get "/list
get "/list", params: {parser: {ticker: "VALE3", year: "2000"}}, :headers => headers
get "/list", params: {:parser => {"ticker": "VALE3", "year": "2012"}}, :headers => headers
request
request.body
request.headers
response.headers
get "/list", params: {:parser => {ticker: "VALE3", year: 2012}}, :headers => headers
get "/list", params: {:parser => {ticker: "VALE3", year: "2012"}}, :headers => headers
response.body
response.params
get "/list", params: {:parser => {ticker: "VALE3", year: "2012"}}, :headers => headers
params
param
params
c
parser_params[:ticker]
parser_params
params
c
params[:parser]
params
c
params
c
params
c
params[:ticker]
params
c
params
c
params
response.body
get "/list", params: {ticker: "VALE3", year: "2000"}, :headers => headers
c
response.status
c
data[month] << {open: organize_month_tuples[month]}
data[month] << {open: organize_month_tuples[month].first}
month
data[month] << {open: organize_month_tuples[month].first[:open]}
c
data[month] << {highest_price: organize_month_tuples[month].map{|x| x[:high]}.max}
data[month] << {lowest_price: organize_month_tuples[month].map{|x| x[:low]}.min}
data[month] << {volume: volume}
data[month] << {close: organize_month_tuples[month].last[:close]}
data[month] << {open: organize_month_tuples[month].first[:open]}
=> 67:       data[month] << {open: organize_month_tuples[month].first[:open]}
c
data[month] << {highest_price: organize_month_tuples[month].map{|x| x[:high]}.max}
data[month] << {lowest_price: organize_month_tuples[month].map{|x| x[:low]}.min}
data[month] << {volume: volume}
data[month] << {close: organize_month_tuples[month].last[:close]}
data[month] << {open: organize_month_tuples[month].first[:open]}
c
data[month] << {highest_price: organize_month_tuples[month].map{|x| x[:high]}.max}
data[month] << {lowest_price: organize_month_tuples[month].map{|x| x[:low]}.min}
data[month] << {volume: volume}
data[month] << {close: organize_month_tuples[month].last[:close]}
data[month] << {open: organize_month_tuples[month].first[:open]}
c
symbol.first
symbol
c
months_initials.map{|x| x.class}
months_initials.map{|x| x.type}
months_initials.map{|x| x.to_sym}
months_initials.map{|x| x}
months_initials
month
data[:month]
c
n
data
n
c
months_initials
c
data
n
c
organize_month_tuples.map(&:first)
organize_month_tuples.map(x&:first)
organize_month_tuples.map(|x| x&:first)
organize_month_tuples.map{|x| x.first}
organize_month_tuples
00"}, {:date=>Wed, 05 Jan 2022, :open=>"29.190001", :high=>"29.270000", :low=>"27.940001", :close=>"28.070000", :Adj_close=>"28.070000", :volume=>"78459800"}, {:date=>Thu, 06 Jan 2022, :ope
organize_month_tuples
c
data
c
data
n
